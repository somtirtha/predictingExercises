library(caret)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# training a classifier
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 10), data=train_data)
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 10), data=train_data)
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), data=train_data)
sapply(train_data, is.numeric)
names(train_data)
names(train_data[ , sapply(train_data, is.numeric)])
names(train_data[ , sapply(train_data, is.numeric)] == 1)
names(train_data[ , sapply(train_data, is.numeric)])beg
library(caret)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
# classe <- trainRaw$classe
train_exclude <- grepl("^X|timestamp|window", names(train_data))
train_data <- train_data[, !train_exclude]
train_data <- train_data[, sapply(train_data, is.numeric)]
# trainCleaned$classe <- classe
test_exclude <- grepl("^X|timestamp|window", names(test_data))
test_data <- test_data[, !test_exclude]
test_data <- test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# training a classifier
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), data=train_data)
# do cross validation
# predict data on test set
test_pred = predict(rf_model, test_data)
# make confusion matrix of the results
confusionMatrix(test_data$classe, test_pred)
library(caret)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
# classe <- trainRaw$classe
classe = train_data$classe
train_exclude <- grepl("^X|timestamp|window", names(train_data))
train_data <- train_data[, !train_exclude]
train_data <- train_data[, sapply(train_data, is.numeric)]
train_data$classe <- classe
test_exclude <- grepl("^X|timestamp|window", names(test_data))
test_data <- test_data[, !test_exclude]
test_data <- test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(7575) # For reproducibile purpose
inTrain <- createDataPartition(train_data$classe, p=0.70, list=F)
training_data <- train_data[inTrain, ]
validation_data <- train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), data=training_data)
# predict data on test set
test_pred = predict(rf_model, validation_data)
# make confusion matrix of the results
confusionMatrix(test_data$classe, test_pred)
confusionMatrix(validation_data$classe, test_pred)
accuracy <- postResample(test_pred, validation_data$classe)
accuracy
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
test_pred = predict(rf_model, validation_data)
# make confusion matrix of the results
confusionMatrix(validation_data$classe, test_pred)
accuracy <- postResample(test_pred, validation_data$classe)
accuracy
library(caret)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
# classe <- trainRaw$classe
classe = train_data$classe
train_exclude <- grepl("^X|timestamp|window", names(train_data))
train_data <- train_data[, !train_exclude]
train_data <- train_data[, sapply(train_data, is.numeric)]
train_data$classe <- classe
test_exclude <- grepl("^X|timestamp|window", names(test_data))
test_data <- test_data[, !test_exclude]
test_data <- test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(7575) # For reproducibile purpose
inTrain <- createDataPartition(train_data$classe, p=0.70, list=F)
training_data <- train_data[inTrain, ]
validation_data <- train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
# predict data on test set
test_pred = predict(rf_model, validation_data)
# make confusion matrix of the results
confusionMatrix(validation_data$classe, test_pred)
accuracy <- postResample(test_pred, validation_data$classe)
accuracy
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
# classe <- trainRaw$classe
classe = train_data$classe
train_exclude <- grepl("^X|timestamp|window", names(train_data))
train_data <- train_data[, !train_exclude]
train_data <- train_data[, sapply(train_data, is.numeric)]
train_data$classe <- classe
test_exclude <- grepl("^X|timestamp|window", names(test_data))
test_data <- test_data[, !test_exclude]
test_data <- test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(7575) # For reproducibile purpose
inTrain <- createDataPartition(train_data$classe, p=0.70, list=F)
training_data <- train_data[inTrain, ]
validation_data <- train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
# predict data on test set
test_pred = predict(rf_model, validation_data)
# make confusion matrix of the results
confusionMatrix(validation_data$classe, test_pred)
accuracy <- postResample(test_pred, validation_data$classe)
accuracy
library(caret)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
# ok = complete.cases(train_data)
# train_data = train_data[ok, ]
# test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
# classe <- trainRaw$classe
classe = train_data$classe
train_exclude <- grepl("^X|timestamp|window", names(train_data))
train_data <- train_data[, !train_exclude]
train_data <- train_data[, sapply(train_data, is.numeric)]
train_data$classe <- classe
test_exclude <- grepl("^X|timestamp|window", names(test_data))
test_data <- test_data[, !test_exclude]
test_data <- test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(7575) # For reproducibile purpose
inTrain <- createDataPartition(train_data$classe, p=0.70, list=F)
training_data <- train_data[inTrain, ]
validation_data <- train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
library(caret)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
# ok = complete.cases(train_data)
# train_data = train_data[ok, ]
# test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
# classe <- trainRaw$classe
classe = train_data$classe
train_exclude <- grepl("^X|timestamp|window", names(train_data))
train_data <- train_data[, !train_exclude]
train_data <- train_data[, sapply(train_data, is.numeric)]
train_data$classe <- classe
test_exclude <- grepl("^X|timestamp|window", names(test_data))
test_data <- test_data[, !test_exclude]
test_data <- test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(22519) # For reproducibile purpose
inTrain <- createDataPartition(train_data$classe, p=0.70, list=F)
training_data <- train_data[inTrain, ]
validation_data <- train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
library(caret)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
# classe <- trainRaw$classe
classe = train_data$classe
train_exclude <- grepl("^X|timestamp|window", names(train_data))
train_data <- train_data[, !train_exclude]
train_data <- train_data[, sapply(train_data, is.numeric)]
train_data$classe <- classe
test_exclude <- grepl("^X|timestamp|window", names(test_data))
test_data <- test_data[, !test_exclude]
test_data <- test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(22519) # For reproducibile purpose
inTrain <- createDataPartition(train_data$classe, p=0.70, list=F)
training_data <- train_data[inTrain, ]
validation_data <- train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
# predict data on test set
test_pred = predict(rf_model, validation_data)
# make confusion matrix of the results
confusionMatrix(validation_data$classe, test_pred)
accuracy <- postResample(test_pred, validation_data$classe)
accuracy
oose <- 1 - as.numeric(confusionMatrix(validation_data$classe, test_pred)$overall[1])
oose
accuracy <- postResample(test_pred, validation_data$classe)
accuracy
oose <- 1 - as.numeric(confusionMatrix(validation_data$classe, test_pred)$overall[1])
oose
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
rf_model$finalModel
library(corrplot)
install.packages("corrplot")
library(corrplot)
test_pred = predict(rf_model, validation_data)
test_pred
corrPlot <- cor(trainData[, -length(names(trainData))])
corrplot(corrPlot, method="color")
library(caret)
library(corrplot)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
classe = train_data$classe
train_exclude = grepl("^X|timestamp|window", names(train_data))
train_data = train_data[, !train_exclude]
train_data = train_data[, sapply(train_data, is.numeric)]
train_data$classe = classe
test_exclude = grepl("^X|timestamp|window", names(test_data))
test_data = test_data[, !test_exclude]
test_data = test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(22519) # For reproducibile purpose
inTrain = createDataPartition(train_data$classe, p=0.70, list=F)
training_data = train_data[inTrain, ]
validation_data = train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
rf_model$finalModel
# predict data on test set
validation_pred = predict(rf_model, validation_data)
# make confusion matrix of the results
confusionMatrix(validation_data$classe, validation_pred)
accuracy = postResample(validation_pred, validation_data$classe)
accuracy
# test on the test data set
test_pred = predict(rf_model, validation_data)
test_pred
corrPlot <- cor(trainData[, -length(names(trainData))])
corrplot(corrPlot, method="color")
corrPlot <- cor(train_data[, -length(names(train_data))])
corrplot(corrPlot, method="color")
library(caret)
library(corrplot)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
classe = train_data$classe
train_exclude = grepl("^X|timestamp|window", names(train_data))
train_data = train_data[, !train_exclude]
train_data = train_data[, sapply(train_data, is.numeric)]
train_data$classe = classe
test_exclude = grepl("^X|timestamp|window", names(test_data))
test_data = test_data[, !test_exclude]
test_data = test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(22519) # For reproducibile purpose
inTrain = createDataPartition(train_data$classe, p=0.70, list=F)
training_data = train_data[inTrain, ]
validation_data = train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
rf_model$finalModel
# predict data on test set
validation_pred = predict(rf_model, validation_data)
# make confusion matrix of the results
confusionMatrix(validation_data$classe, validation_pred)
accuracy = postResample(validation_pred, validation_data$classe)
accuracy
# test on the test data set
test_pred = predict(rf_model, validation_data)
test_pred
corrPlot <- cor(train_data[, -length(names(train_data))])
corrplot(corrPlot, method="color")
library(caret)
library(corrplot)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
names(train_data)
library(caret)
library(corrplot)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
names(train_data)
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
classe = train_data$classe
train_exclude = grepl("^X|timestamp|window", names(train_data))
train_data = train_data[, !train_exclude]
train_data = train_data[, sapply(train_data, is.numeric)]
train_data$classe = classe
test_exclude = grepl("^X|timestamp|window", names(test_data))
test_data = test_data[, !test_exclude]
test_data = test_data[, sapply(test_data, is.numeric)]
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(22519) # For reproducibile purpose
inTrain = createDataPartition(train_data$classe, p=0.70, list=F)
training_data = train_data[inTrain, ]
validation_data = train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
rf_model$finalModel
# predict data on test set
validation_pred = predict(rf_model, validation_data)
# make confusion matrix of the results
confusionMatrix(validation_data$classe, validation_pred)
accuracy = postResample(validation_pred, validation_data$classe)
accuracy
# test on the test data set
test_pred = predict(rf_model, validation_data)
test_pred
corrPlot <- cor(train_data[, -length(names(train_data))])
corrplot(corrPlot, method="color")
library(caret)
library(corrplot)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
names(train_data)
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
classe = train_data$classe
train_exclude = grepl("^X|timestamp|window", names(train_data))
train_data = train_data[, !train_exclude]
train_data = train_data[, sapply(train_data, is.numeric)]
train_data$classe = classe
test_exclude = grepl("^X|timestamp|window", names(test_data))
test_data = test_data[, !test_exclude]
test_data = test_data[, sapply(test_data, is.numeric)]
stop("dummy error")
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(22519) # For reproducibile purpose
inTrain = createDataPartition(train_data$classe, p=0.70, list=F)
training_data = train_data[inTrain, ]
validation_data = train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
rf_model$finalModel
# predict data on test set
validation_pred = predict(rf_model, validation_data)
# make confusion matrix of the results
confusionMatrix(validation_data$classe, validation_pred)
accuracy = postResample(validation_pred, validation_data$classe)
accuracy
# test on the test data set
test_pred = predict(rf_model, validation_data)
test_pred
corrPlot <- cor(train_data[, -length(names(train_data))])
corrplot(corrPlot, method="color")
library(caret)
library(corrplot)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
names(train_data)
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
classe = train_data$classe
train_exclude = grepl("^X|timestamp|window", names(train_data))
train_data = train_data[, !train_exclude]
train_data = train_data[, sapply(train_data, is.numeric)]
train_data$classe = classe
test_exclude = grepl("^X|timestamp|window", names(test_data))
test_data = test_data[, !test_exclude]
test_data = test_data[, sapply(test_data, is.numeric)]
stop("dummy error")
# belt, forearm, arm, and dumbell
# selection of features
features = names(train_data)
# split the training data into training and validation sets
set.seed(22519) # For reproducibile purpose
inTrain = createDataPartition(train_data$classe, p=0.70, list=F)
training_data = train_data[inTrain, ]
validation_data = train_data[-inTrain, ]
# training a classifier
# do cross validation
rf_model = train(classe ~ ., method="rf", trControl=trainControl(method="cv", 5), ntree=250, data=training_data)
library(caret)
library(corrplot)
# read the trainig and test sets
train_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
names(train_data)
# clean data
ok = complete.cases(train_data)
train_data = train_data[ok, ]
test_data = test_data[ok, ]
train_data = train_data[ , colSums(is.na(train_data)) == 0]
test_data = test_data[ , colSums(is.na(test_data)) == 0]
classe = train_data$classe
train_exclude = grepl("^X|timestamp|window", names(train_data))
train_data = train_data[, !train_exclude]
train_data = train_data[, sapply(train_data, is.numeric)]
train_data$classe = classe
test_exclude = grepl("^X|timestamp|window", names(test_data))
test_data = test_data[, !test_exclude]
test_data = test_data[, sapply(test_data, is.numeric)]
quit("yes")
